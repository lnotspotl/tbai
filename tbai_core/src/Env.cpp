#include <tbai_core/Env.hpp>
#include <tbai_core/Throws.hpp>

namespace tbai {

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
template <>
bool getEnvAs(const std::string &var, bool allowDefault, bool defaultValue) {
    std::string value = getEnvAs<std::string>(var, allowDefault, defaultValue ? "true" : "false");
    std::transform(value.begin(), value.end(), value.begin(), ::tolower);
    return (value == "true" || value == "1" || value == "yes" || value == "on");
}

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
void setEnv(const std::string &var, const std::string &value) {
    if (setenv(var.c_str(), value.c_str(), 1) != 0) {
        TBAI_THROW("Failed to set environment variable " + var);
    }
}

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
void unsetEnv(const std::string &var) {
    if (unsetenv(var.c_str()) != 0) {
        TBAI_THROW("Failed to unset environment variable " + var);
    }
}

}  // namespace tbai